/*
 * This file is generated by jOOQ.
 */
package nexus.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nexus.jooq.generated.Public;
import nexus.jooq.generated.tables.records.AgentTaskStatusRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AgentTaskStatus extends TableImpl<AgentTaskStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.agent_task_status</code>
     */
    public static final AgentTaskStatus AGENT_TASK_STATUS = new AgentTaskStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgentTaskStatusRecord> getRecordType() {
        return AgentTaskStatusRecord.class;
    }

    /**
     * The column <code>public.agent_task_status.user_id</code>.
     */
    public final TableField<AgentTaskStatusRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.agent_task_status.task_status</code>.
     */
    public final TableField<AgentTaskStatusRecord, String> TASK_STATUS = createField(DSL.name("task_status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private AgentTaskStatus(Name alias, Table<AgentTaskStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private AgentTaskStatus(Name alias, Table<AgentTaskStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.agent_task_status</code> table reference
     */
    public AgentTaskStatus(String alias) {
        this(DSL.name(alias), AGENT_TASK_STATUS);
    }

    /**
     * Create an aliased <code>public.agent_task_status</code> table reference
     */
    public AgentTaskStatus(Name alias) {
        this(alias, AGENT_TASK_STATUS);
    }

    /**
     * Create a <code>public.agent_task_status</code> table reference
     */
    public AgentTaskStatus() {
        this(DSL.name("agent_task_status"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Check<AgentTaskStatusRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("agent_task_status_task_status_check"), "(((task_status)::text = ANY ((ARRAY['READY'::character varying, 'TALKING'::character varying, 'AFTER_CALL'::character varying, 'BREAK'::character varying])::text[])))", true)
        );
    }

    @Override
    public AgentTaskStatus as(String alias) {
        return new AgentTaskStatus(DSL.name(alias), this);
    }

    @Override
    public AgentTaskStatus as(Name alias) {
        return new AgentTaskStatus(alias, this);
    }

    @Override
    public AgentTaskStatus as(Table<?> alias) {
        return new AgentTaskStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AgentTaskStatus rename(String name) {
        return new AgentTaskStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AgentTaskStatus rename(Name name) {
        return new AgentTaskStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AgentTaskStatus rename(Table<?> name) {
        return new AgentTaskStatus(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
