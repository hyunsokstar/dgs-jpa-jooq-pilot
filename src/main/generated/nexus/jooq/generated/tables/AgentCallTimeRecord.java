/*
 * This file is generated by jOOQ.
 */
package nexus.jooq.generated.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import nexus.jooq.generated.Public;
import nexus.jooq.generated.tables.records.AgentCallTimeRecordRecord;

import org.jooq.Field;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AgentCallTimeRecord extends TableImpl<AgentCallTimeRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.agent_call_time_record</code>
     */
    public static final AgentCallTimeRecord AGENT_CALL_TIME_RECORD = new AgentCallTimeRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgentCallTimeRecordRecord> getRecordType() {
        return AgentCallTimeRecordRecord.class;
    }

    /**
     * The column <code>public.agent_call_time_record.id</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.agent_call_time_record.after_call_time_seconds</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> AFTER_CALL_TIME_SECONDS = createField(DSL.name("after_call_time_seconds"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.agent_call_time_record.break_time_seconds</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> BREAK_TIME_SECONDS = createField(DSL.name("break_time_seconds"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.agent_call_time_record.call_time_seconds</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> CALL_TIME_SECONDS = createField(DSL.name("call_time_seconds"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.agent_call_time_record.created_at</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.agent_call_time_record.inbound_time_seconds</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> INBOUND_TIME_SECONDS = createField(DSL.name("inbound_time_seconds"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.agent_call_time_record.outbound_time_seconds</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> OUTBOUND_TIME_SECONDS = createField(DSL.name("outbound_time_seconds"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.agent_call_time_record.ready_time_seconds</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> READY_TIME_SECONDS = createField(DSL.name("ready_time_seconds"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.agent_call_time_record.record_date</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, LocalDate> RECORD_DATE = createField(DSL.name("record_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.agent_call_time_record.updated_at</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.agent_call_time_record.user_id</code>.
     */
    public final TableField<AgentCallTimeRecordRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AgentCallTimeRecord(Name alias, Table<AgentCallTimeRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AgentCallTimeRecord(Name alias, Table<AgentCallTimeRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.agent_call_time_record</code> table
     * reference
     */
    public AgentCallTimeRecord(String alias) {
        this(DSL.name(alias), AGENT_CALL_TIME_RECORD);
    }

    /**
     * Create an aliased <code>public.agent_call_time_record</code> table
     * reference
     */
    public AgentCallTimeRecord(Name alias) {
        this(alias, AGENT_CALL_TIME_RECORD);
    }

    /**
     * Create a <code>public.agent_call_time_record</code> table reference
     */
    public AgentCallTimeRecord() {
        this(DSL.name("agent_call_time_record"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AgentCallTimeRecordRecord, Long> getIdentity() {
        return (Identity<AgentCallTimeRecordRecord, Long>) super.getIdentity();
    }

    @Override
    public AgentCallTimeRecord as(String alias) {
        return new AgentCallTimeRecord(DSL.name(alias), this);
    }

    @Override
    public AgentCallTimeRecord as(Name alias) {
        return new AgentCallTimeRecord(alias, this);
    }

    @Override
    public AgentCallTimeRecord as(Table<?> alias) {
        return new AgentCallTimeRecord(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AgentCallTimeRecord rename(String name) {
        return new AgentCallTimeRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AgentCallTimeRecord rename(Name name) {
        return new AgentCallTimeRecord(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AgentCallTimeRecord rename(Table<?> name) {
        return new AgentCallTimeRecord(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, Long, LocalDateTime, Long, Long, Long, LocalDate, LocalDateTime, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super Long, ? super LocalDate, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super Long, ? super LocalDate, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
