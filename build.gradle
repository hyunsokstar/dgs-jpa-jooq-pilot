// 📄 pilot-for-jooq/build.gradle

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.7-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.7'
    id "nu.studer.jooq" version "8.2"
    id 'idea'  // ✅ IntelliJ IDEA 플러그인 추가 (필수!)
}

group = 'nexus.edu.team'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('netflixDgsVersion', "10.1.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation("org.springframework.boot:spring-boot-starter-security")

    implementation("io.jsonwebtoken:jjwt-api:0.11.5")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")

    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    jooqGenerator 'org.postgresql:postgresql'
}

dependencyManagement {
    imports {
        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// ✅ 생성된 소스 디렉토리 설정 (변수로 관리)
def generatedDir = 'src/main/generated'

sourceSets {
    main {
        java {
            srcDirs += [generatedDir]  // ✅ 리스트 형태로 추가
        }
    }
}

// ✅ IntelliJ IDEA 설정 (가장 중요한 부분!)
idea {
    module {
        sourceDirs += file(generatedDir)           // ✅ 소스 디렉토리로 추가
        generatedSourceDirs += file(generatedDir)  // ✅ 생성된 소스로 마킹
    }
}

// ✅ Clean 시 generated 폴더 정리
clean.doLast {
    project.file(generatedDir).deleteDir()
}

jooq {
    version = "3.18.9"
    edition = 'OSS'

    configurations {
        main {

            generationTool {
                logging = "DEBUG"
                onError = "LOG"

                jdbc {
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:5432/pilotdb"
                    user = "pilot"
                    password = "pilot1234"

                    properties {
                        property {
                            key = "ssl"
                            value = "false"
                        }
                        property {
                            key = "loginTimeout"
                            value = "30"
                        }
                        property {
                            key = "connectTimeout"
                            value = "30"
                        }
                    }
                }

                generator {
                    name = "org.jooq.codegen.DefaultGenerator"
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"

                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"
                        includes = ".*"

                        includeForeignKeys = false
                        includePrimaryKeys = false
                        includeIndexes = false
                        includeSequences = false

                        properties {
                            property {
                                key = "useInformationSchema"
                                value = "false"
                            }
                            property {
                                key = "postgresql.readonly"
                                value = "true"
                            }
                            property {
                                key = "renderNameStyle"
                                value = "LOWER_IF_UNQUOTED"
                            }
                        }
                    }

                    generate {
                        daos = false
                        pojos = true
                        tables = true
                        records = true
                        relations = false
                        keys = false
                        indexes = false
                        sequences = false

                        pojosEqualsAndHashCode = true
                        pojosToString = true
                        fluentSetters = false
                    }

                    target {
                        packageName = "nexus.jooq.generated"
                        directory = generatedDir  // ✅ 변수 사용
                    }
                }
            }
        }
    }
}